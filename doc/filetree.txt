*filetree.nvim* *filetree*

File manager for Neovim written in Lua.

==============================================================================
CONTENTS                                                     *filetree-contents*

Setup                                                           |filetree-setup|
Commands                                                     |filetree-commands|
Config                                                         |filetree-config|
View                                                             |filetree-view|
Mapping                                                       |filetree-mapping|
Node                                                             |filetree-node|
Extensions                                                 |filetree-extensions|
Integrations                                             |filetree-integrations|

==============================================================================
SETUP                                                           *filetree-setup*

Example config: >

  local FileTree = require("filetree")
  local Mapping = FileTree.Mapping
  FileTree:setup({
  
    directory = vim.fn.getcwd(),
  
    highlight = {
      dir = {ctermfg = "blue"},
      dir_expanded = {ctermfg = "blue"},
      file = {ctermfg = "white"}
    },
  
    view = {
      position = "right",
      width = 40,
      height = 40,
      indent = 2,
      line_width = 6,
      show_dot_files = false,
  
      indent_markers = {
        enable = true,
        symbols = {
  	edge = "│",
  	corner = "└"
        }
      },
  
      file_symbols = {
        dir = {symbol = "", hlg = "filetree_dir"},
        dir_expanded = {symbol = "", hlg = "filetree_dir_expanded"},
        file = ""
      },
  
      file_names = {
        dir = {prefix = "/"},
        dir_expanded = {prefix = "/"}
      },
    },
  
    mapping = {
      wrap_cursor = true,
      close_children = true,
      yank_file_names = "path",
      keymaps = {
        ["j"] = Mapping:cursor_down(),
        ["k"] = Mapping:cursor_up(),
        ["l"] = Mapping:open(),
        ["h"] = Mapping:close(),
        ["<Enter>"] = Mapping:enter(),
        ["w"] = Mapping:mark(false),
        ["W"] = Mapping:mark(true),
        ["N"] = Mapping:make_file(),
        ["K"] = Mapping:make_directory(),
        ["r"] = Mapping:rename(),
        ["R"] = Mapping:rename("name"),
        ["e"] = Mapping:rename("ext"),
        ["c"] = Mapping:copy(),
        ["m"] = Mapping:move(),
        ["x"] = Mapping:remove(),
        ["y"] = Mapping:yank(),
        ["p"] = Mapping:paste(),
        ["P"] = Mapping:pack(false),
        ["C"] = Mapping:compress(false),
        ["i"] = Mapping:info(),
        ["v"] = Mapping:preview(),
        ["."] = Mapping:toggle_hidden(),
        [","] = Mapping:redraw(),
        [";"] = Mapping:reload(),
        ["<Esc>"] = Mapping:clear()
      }
    },
  
    file_preview = {
      quit_on_esc = true,
      type = "float",
      relative = "editor",
      absolute = false,
      width = 0.9,
      height = 0.7,
      row = 0.5,
      col = 0.5,
      border = "single",
      number = true,
      relativenumber = true
    },
  
    filters = {
      exclude = {
        dot_files = false,
        pattern = ""
      }
    },
  
    actions = {
      sort_nodes = {
        method = "name",
        directories = "top",
        reverse = false
      },
  
      root_changed = {
        change_cwd = false
      },
  
      open_file = {
        quit_tree = false,
        window_picker = {
  	enable = true,
  	ids = "aoeuhtns",
  	exclude = {
  	  buftypes = {"nofile", "help"},
  	  bufnames = {}
  	}
        }
      }
    }
  
  })
  _G.filetree:enable_extension("icons", {position = "first"})
  vim.cmd("FTreeOpen")

==============================================================================
COMMANDS                                                     *filetree-commands*

                                                            *filetree-FTreeOpen*
:FTreeOpen                         Opens a new file tree window.

                                                           *filetree-FTreeClose*
:FTreeClose                        Closes current file tree window.

==============================================================================
CONFIG                                                         *filetree-config*

                                                     *filetree-config-directory*
directory~
  `string`
  Root directory of the file tree.
  (default: current working directory)

                                                     *filetree-config-highlight*
highlight~
  `table`
  Table of highlights to define.
  Each entry must be a table with a key and have these values:
    - `cterm`(optional)    See: |highlight-args|
    - `ctermfg`(optional)  See: |highlight-args|
    - `ctermbg`(optional)  See: |highlight-args|
  where key is the highlight name.
  (default: {})

                                                 *filetree-config-highlight.dir*
highlight.dir~
  `table`
  Highlight for directory.
  (default: `{ctermfg = 223}`)

                                        *filetree-config-highlight.dir_expanded*
highlight.dir_expanded~
  `table`
  Highlight for expanded directory.
  (default: `{ctermfg = 208}`)

                                                *filetree-config-highlight.file*
highlight.file~
  `table`
  Highlight for file.
  (default: `{ctermfg = 246}`)

                                                *filetree-config-highlight.edge*
highlight.edge~
  `table`
  Highlight for indent marker edge.
  (default: `{ctermfg = "white"}`)

                                              *filetree-config-highlight.corner*
highlight.corner~
  `table`
  Highlight for indent marker corner.
  (default: `{ctermfg = "white"}`)

                                         *filetree-config-highlight.fi_key_path*
highlight.fi_key_path~
  `table`
  Highlight for the key `path` in |filetree-file-info-view|.
  (default: `{ctermfg = "white"}`)

                                         *filetree-config-highlight.fi_key_name*
highlight.fi_key_name~
  `table`
  Highlight for the key `name` in |filetree-file-info-view|.
  (default: `highlight.fi_key_path`)

                                         *filetree-config-highlight.fi_key_type*
highlight.fi_key_type~
  `table`
  Highlight for the key `type` in |filetree-file-info-view|.
  (default: `highlight.fi_key_path`)

                                         *filetree-config-highlight.fi_key_size*
highlight.fi_key_size~
  `table`
  Highlight for the key `size` in |filetree-file-info-view|.
  (default: `highlight.fi_key_path`)

                                         *filetree-config-highlight.fi_key_perm*
highlight.fi_key_perm~
  `table`
  Highlight for the key `perm` in |filetree-file-info-view|.
  (default: `highlight.fi_key_path`)

                                      *filetree-config-highlight.fi_key_created*
highlight.fi_key_created~
  `table`
  Highlight for the key `created` in |filetree-file-info-view|.
  (default: `highlight.fi_key_path`)

                                     *filetree-config-highlight.fi_key_modified*
highlight.fi_key_modified~
  `table`
  Highlight for the key `modified` in |filetree-file-info-view|.
  (default: `highlight.fi_key_path`)

                                     *filetree-config-highlight.fi_key_readable*
highlight.fi_key_readable~
  `table`
  Highlight for the key `readable` in |filetree-file-info-view|.
  (default: `highlight.fi_key_path`)

                                     *filetree-config-highlight.fi_key_writable*
highlight.fi_key_writable~
  `table`
  Highlight for the key `writable` in |filetree-file-info-view|.
  (default: `highlight.fi_key_path`)

                                         *filetree-config-highlight.fi_key_link*
highlight.fi_key_link~
  `table`
  Highlight for the key `link` in |filetree-file-info-view|.
  (default: `highlight.fi_key_path`)

                                             *filetree-config-highlight.fi_path*
highlight.fi_path~
  `table`
  Highlight for `path` in |filetree-file-info-view|.
  (default: `{ctermfg = "white"}`)

                                             *filetree-config-highlight.fi_name*
highlight.fi_name~
  `table`
  Highlight for `name` in |filetree-file-info-view|.
  (default: `highlight.fi_path`)

                                             *filetree-config-highlight.fi_type*
highlight.fi_type~
  `table`
  Highlight for `type` in |filetree-file-info-view|.
  (default: `highlight.fi_path`)

                                             *filetree-config-highlight.fi_size*
highlight.fi_size~
  `table`
  Highlight for `size` in |filetree-file-info-view|.
  (default: `highlight.fi_path`)

                                             *filetree-config-highlight.fi_perm*
highlight.fi_perm~
  `table`
  Highlight for `perm` in |filetree-file-info-view|.
  (default: `highlight.fi_path`)

                                          *filetree-config-highlight.fi_created*
highlight.fi_created~
  `table`
  Highlight for `created` in |filetree-file-info-view|.
  (default: `highlight.fi_path`)

                                         *filetree-config-highlight.fi_modified*
highlight.fi_modified~
  `table`
  Highlight for `modified` in |filetree-file-info-view|.
  (default: `highlight.fi_path`)

                                         *filetree-config-highlight.fi_readable*
highlight.fi_readable~
  `table`
  Highlight for `readable` in |filetree-file-info-view|.
  (default: `highlight.fi_path`)

                                         *filetree-config-highlight.fi_writable*
highlight.fi_writable~
  `table`
  Highlight for `writable` in |filetree-file-info-view|.
  (default: `highlight.fi_path`)

                                             *filetree-config-highlight.fi_link*
highlight.fi_link~
  `table`
  Highlight for `link` in |filetree-file-info-view|.
  (default: `highlight.fi_path`)

                                                          *filetree-config-view*
view~
  `table`
  Table with view options.
  (default: {})

                                                 *filetree-config-view.position*
view.position~
  `string`
  Position of the tree window.
  Valid values are: "left", "right", "bottom", "top"
  (default: "left")

                                                    *filetree-config-view.width*
view.width~
  `number`
  Width of the tree window.
  (default: 30)

                                                   *filetree-config-view.height*
view.height~
  `number`
  Height of the tree window.
  (default: 30)

                                                   *filetree-config-view.indent*
view.indent~
  `number`
  Number of spaces to indent.
  (default: 2)

                                               *filetree-config-view.line_width*
view.line_width~
  `number`
  Maximum width of a line.
  Interpreted as (width - line_width), where width is the tree window width.
  (default: 6)

                                           *filetree-config-view.show_dot_files*
view.show_dot_files~
  `boolean`
  Show dot files (aka hidden files) in file tree.
  (default: false)

                                          *filetree-config-view.render_callback*
view.render_callback~
  `function`|`nil`
  Function to call when a node needs to render.
  It takes one parameter, |filetree-node|.
  (default: nil)

                                           *filetree-config-view.indent_markers*
view.indent_markers~
 `table`
 Options for indenting markers in file tree.
 (default: {})

                                    *filetree-config-view.indent_markers.enable*
view.indent_markers.enable~
  `boolean`
  Enable indent markers.
  (default: false)

                                        *filetree-config-view.indent_markers.hl*
view.indent_markers.hl~
  `table`|`string`
  Highlight to use when rendering indent.
  If table then these values are valid:
    - `ns`     `number` Highlight namespace to use.
    - `group`  `string` Highlight group to use.

                                   *filetree-config-view.indent_markers.symbols*
view.indent_markers.symbols~
  `table`
  Table of symbols to use when indenting markers.
  Each entry must be a string with the symbol.
  (default: {})

                              *filetree-config-view.indent_markers.symbols.edge*
view.indent_markers.symbols.edge~
  `string`
  Edge of a marker.
  (default: "│")

                            *filetree-config-view.indent_markers.symbols.corner*
view.indent_markers.symbols.corner~
  `string`
  Corner of a marker.
  (default: "└")

                                             *filetree-config-view.file_symbols*
view.file_symbols~
  `table`
  Table of symbols for diffrent file types.
  Each entry must be a table or a string:
  If entry is a table then these values are valid.
    - `symbol`            `string` Symbol for file.
    - `hlns`(optional)    `number` Highlight namespace to use.
    - `hlg`(optional)     `string` Highlight group to use.
  If entry is a string then the file symbol is the string.
  (default: {})

                                         *filetree-config-view.file_symbols.dir*
view.file_symbols.dir~
  `table`|`string`
  Symbol for directory.
  (default: `{symbol = "", hlg = "filetree_dir"}`)

                                *filetree-config-view.file_symbols.dir_expanded*
view.file_symbols.dir_expanded~
  `table`|`string`
  Symbol for expanded directory.
  (default: `{symbol = "", hlg = "filetree_dir_expanded"}`)

                                    *filetree-config-view.file_symbols.link_dir*
view.file_symbols.link_dir~
  `table`|`string`
  Symbol for directory symlink.
  (default: `view.file_symbols.dir`)

                           *filetree-config-view.file_symbols.link_dir_expanded*
view.file_symbols.link_dir_expanded~
  `table`|`string`
  Symbol for expanded directory symlink.
  (default: `view.file_symbols.dir_expanded`)

                                        *filetree-config-view.file_symbols.file*
view.file_symbols.file~
  `table`|`string`
  Symbol for file.
  (default: `{symbol = "", hlg = "filetree_file"}`)

                                        *filetree-config-view.file_symbols.link*
view.file_symbols.link~
  `table`|`string`
  Symbol for symlink file.
  (default: `view.file_symbols.file`)

                                       *filetree-config-view.file_symbols.block*
view.file_symbols.block~
  `table`|`string`
  Symbol for block device file.
  (default: `view.file_symbols.file`)

                                        *filetree-config-view.file_symbols.char*
view.file_symbols.char~
  `table`|`string`
  Symbol for char device file.
  (default: `view.file_symbols.file`)

                                      *filetree-config-view.file_symbols.socket*
view.file_symbols.socket~
  `table`|`string`
  Symbol for socket file.
  (default: `view.file_symbols.file`)

                                        *filetree-config-view.file_symbols.fifo*
view.file_symbols.fifo~
  `table`|`string`
  Symbol for fifo file.
  (default: `view.file_symbols.file`)

                                               *filetree-config-view.file_names*
view.file_names~
  `table`
  Table of information on how a file name is displayed.
  Each entry must be a table with these values:
    - `prefix`(optional)  `string` Text to place before file name.
    - `suffix`(optional)  `string` Text to place after file name.
    - `hlns`(optional)    `number` Highlight namespace to use.
    - `hlg`(optional)     `string` Highlight group to use.
  (default: {})

                                           *filetree-config-view.file_names.dir*
view.file_names.dir ~
  `table`
  Information on how a directory name is displayed.
  (default: `{suffix = "/", hlg = "filetree_dir"}`)
  
                                  *filetree-config-view.file_names.dir_expanded*
view.file_names.dir_expanded~
  `table`
  Information on how a expanded directory name is displayed.
  (default: `{suffix = "/", hlg = "filetree_dir_expanded"}`)
 
                                      *filetree-config-view.file_names.link_dir*
view.file_names.link_dir~
  `table`
  Information on how a directory symlink name is displayed.
  (default: `viem.file_names.dir`)
  
                             *filetree-config-view.file_names.link_dir_expanded*
view.file_names.link_dir_expanded~
  `table`
  Information on how a expanded directory symlink name is displayed.
  (default: `view.file_names.dir_expanded`)
  
                                          *filetree-config-view.file_names.file*
view.file_names.file~
  `table`
  Information on how a file name is displayed.
  (default: `{suffix = "", hlg = "filetree_file"}`)

                                          *filetree-config-view.file_names.link*
view.file_names.link~
  `table`
  Information on how a symlink file name is displayed.
  (default: `{suffix = "@", hlg = "filetree_file"}`)

                                         *filetree-config-view.file_names.block*
view.file_names.block~
  `table`
  Information on how a block device file name is displayed.
  (default: `{suffix = "#", hlg = "filetree_file"}`)

                                          *filetree-config-view.file_names.char*
view.file_names.char~
  `table`
  Information on how a char device file name is displayed.
  (default: `{suffix = "%", hlg = "filetree_file"}`)

                                        *filetree-config-view.file_names.socket*
view.file_names.socket~
  `table`
  Information on how a socket file name is displayed.
  (default: `{suffix = "=", hlg = "filetree_file"}`)

                                          *filetree-config-view.file_names.fifo*
view.file_names.fifo~
  `table`
  Information on how a fifo file name is displayed.
  (default: `{suffix = "|", hlg = "filetree_file"}`)

                                                *filetree-config-view.file_exts*
view.file_exts~
  `table`
  Table of symbols to display at the end of a line.
  Each entry must be a table with these values:
    - `symbol`(optional)  `string` Symbol to display.
    - `hlns`(optional)    `number` Highlight namespace to use.
    - `hlg`(optional)     `string` Highlight group to use.
  (default: {})

                                            *filetree-config-view.file_exts.dir*
view.file_exts.dir~
  `table`|`nil`
  Symbol for a directory to display at end of line.
  (default: nil)

                                   *filetree-config-view.file_exts.dir_expanded*
view.file_exts.dir_expanded~
  `table`|`nil`
  Symbol for a expanded directory to display at end of line.
  (default: nil)

                                       *filetree-config-view.file_exts.link_dir*
view.file_exts.link_dir~
  `table`|`nil`
  Symbol for a directory symlink to display at end of line.
  (default: `view.file_exts.dir`)

                              *filetree-config-view.file_exts.link_dir_expanded*
view.file_exts.link_dir_expanded~
  `table`|`nil`
  Symbol for a expanded directory symlink to display at end of line.
  (default: `view.file_exts.dir_expanded`)

                                           *filetree-config-view.file_exts.file*
view.file_exts.file~
  `table`|`nil`
  Symbol for a file to display at the end of line.
  (default: nil)

                                           *filetree-config-view.file_exts.link*
view.file_exts.link~
  `table`|`nil`
  Symbol for a symlink file to display at the end of line.
  (default: `view.file_exts.file`)

                                          *filetree-config-view.file_exts.block*
view.file_exts.block~
  `table`|`nil`
  Symbol for a block device file to display at the end of line.
  (default: `view.file_exts.file`)

                                           *filetree-config-view.file_exts.char*
view.file_exts.char~
  `table`|`nil`
  Symbol for a char device file to display at the end of line.
  (default: `view.file_exts.file`)

                                         *filetree-config-view.file_exts.socket*
view.file_exts.socket~
  `table`|`nil`
  Symbol for a socket file to display at the end of line.
  (default: `view.file_exts.file`)

                                           *filetree-config-view.file_exts.fifo*
view.file_exts.fifo~
  `table`|`nil`
  Symbol for a fifo file to display at the end of line.
  (default: `view.file_exts.file`)

                                                       *filetree-config-mapping*
mapping~
  `table`
  Table of options used for key mappings.
  (default: {})

                                           *filetree-config-mapping.wrap_cursor*
mapping.wrap_cursor~
  `boolean`
  Wraps the cursor.
  (default: false)

                                        *filetree-config-mapping.close_children*
mapping.close_children~
  `boolean`
  Close sub directories when closing a directory.
  (default: true)

                                       *filetree-config-mapping.yank_file_names*
mapping.yank_file_names~
  `string`
  Save yanked files file names to yank reigster.
  Valid values are: "none", "path", "name"
    - "none"  Do not put file name in register.
    - "path"  Save the file path.
    - "name"  Save the file name.
  (default: "path")

                                               *filetree-config-mapping.keymaps*
mapping.keymaps~
  `table`
  Table of key mappings.
  See |filetree-mappings|.

                                                *filetree-config-file_info_view*
file_info_view~
  `table`
  Table of options for the file info view.
  (default: {})

                                        *filetree-config-file_info_view.content*
file_info_view.content~
  `table`
  List of things to display in the info view.
  Each entry must be a table with these optinal entries:
    - `callback`  `function`(optional) functions to call when
                displaying a file attribute.
		The arguments passed to the callback are:
		  - `lines`  `table` Lines to render in window.
		  - `hls`    `table` Highlights to use.
		           Must have 5 values which are:
			     - `hl_ns`      Highlight namespace.
			     - `hl_group`   Highlight group.
			     - `line`       Line to start the highlight.
			     - `col_start`  Column to start the highlight.
			     - `col_end`    Column to end the highlight.
		  - `node`   `table` The node to display.
    - `key`       `string`(optional if `callback` is provided)
                the name of the value to display.
                Valid values are:
                  - "path"      Display the file path.
	          - "name"      Display the file name.
	          - "type"      Display the file type.
	          - "size"      Display the file size.
	          - "perm"      Display the file permissions.
	          - "created"   Display the file created time.
	          - "modified"  Display the file modified time.
		  - "readable"  Display if file is readable.
		  - "writable"  Display if file is writable.
		  - "link"      Display all linked files if type is symlink.
    - `prefix`    `table`|`string`(optional) text to display before the value.
    - `fmt`       `string`(optional) the format of the value.
                Uses the Lua `string.format` function that get passed with
	        these arguments:
	          - value to display.
		  - (optional) suffix for value (like "MiB" for the `size` key).
    - `hlns`      `number`(optional) highlight namespace to use
                when highlighting value.
    - `hlg`       `string`(optional) highlight group to use
                when highlighting value.
    - `resolved`  `boolean`(optional) use the resolved file path.
  (default: `{...}`)

                                                  *filetree-config-file_preview*
file_preview~
  `table`
  Table of options to use for file preview.
  (default: {})

                                      *filetree-config-file_preview.quit_on_esc*
file_preview.quit_on_esc~
  `boolean`
  Quit the preview when pressing <Escape>.
  (default: true)

                                             *filetree-config-file_preview.type*
file_preview.type~
  `string`
  Type of window.
  Valid values are:
    - "float"   For a floating window.
              See: |api-floatwin|.
    - "normal"  For a non-floating window.
  (default: "float")

                                         *filetree-config-file_preview.relative*
file_preview.relative~
  `string`
  See: |nvim_open_win()|.
  (default: "editor")
	
                                         *filetree-config-file_preview.absolute*
file_preview.absolute~
  `boolean`
  Place window at absolute values if true. Otherwise
  place window at percent of values. (TODO)
  (default: false)

                                            *filetree-config-file_preview.width*
file_preview.width~
  `number`
  Width of preview window.
  (default: 0.9)

                                           *filetree-config-file_preview.height*
file_preview.height~
  `number`
  Height of preview window.
  (default: 0.7)

                                              *filetree-config-file_preview.row*
file_preview.row~
  `number`
  Row position of preview window.

                                              *filetree-config-file_preview.col*
file_preview.col~
  `number`
  Column position of preview window.

                                           *filetree-config-file_preview.border*
file_preview.border~
  `string`
  See: |nvim_open_win()|.
  (default: "single")

                                           *filetree-config-file_preview.number*
file_preview.number~
  `boolean`
  Enable 'number' option for preview window.
  (default: true)

                                   *filetree-config-file_preview.relativenumber*
file_preview.relativenumber~
  `boolean`
  Enable 'relativenumber' option for preview window.
  (default: true)

                                                       *filetree-config-filters*
filters~
  `table`
  Table of options for filtering files from directories.
  (default: {})

                                              *filetree-config-filters.callback*
filters.callback~
  `function`|`nil`
  Function to call when filtering files.
  Callback has 1 argument:
    - `files`  `table` Files to filter.
  (default: nil)

                                               *filetree-config-filters.exclude*
filters.exclude~
  `table`
  Options for excluding files.
  (default: {})

                                     *filetree-config-filters.exclude.dot_files*
filters.exclude.dot_files~
  `boolean`
  Exclude dot files (aka hidden files) from directory.
  (default: false)

                                       *filetree-config-filters.exclude.pattern*
filters.pattern~
  `string`
  Exclude files that matches the pattern (|regular-expression|).
  (default: "")

                                                       *filetree-config-actions*
actions~
  `table`
  Table of options for diffrent actions.
  (default: {})

                                            *filetree-config-actions.sort_nodes*
actions.sort_nodes~
  `table`
  Options to use when sorting nodes.
  (default: {})

                                   *filetree-config-actions.sort_nodes.callback*
actions.sort_nodes.callback~
  `function`|`nil`
  Callback for sorting nodes.
  The callback has 1 parameter:
    - `nodes`  Nodes to sort.
  (default: nil)

                                     *filetree-config-actions.sort_nodes.method*
actions.sort_nodes.method~
  `string`
  Method to use when sorting nodes.
  Valid values are:
    - "name"       Sort by file name.
    - "nameS"      Sort by file name (case sensitive).
    - "type"       Sort by file type.
    - "rtype"      Sort by resolved file type.
    - "size"       Sort by file size.
    - "modified"   Sort by file last modified.
  (default: "name")

                                *filetree-config-actions.sort_nodes.directories*
actions.sort_nodes.directories~
  `string`
  How to sort directories.
  Valid values are:
    - "none"    Do not sort directories.
    - "top"     Place directories at top of the tree.
    - "bottom"  Place directories at bottom of the tree.
  (default: "top")

                                    *filetree-config-actions.sort_nodes.reverse*
actions.sort_nodes.reverse~
  `boolean`
  Reverse node order.
  (default: false)

                                          *filetree-config-actions.root_changed*
actions.root_changed~
  `table`
  Options to use when changing root.
  (default: {})

                                 *filetree-config-actions.root_changed.callback*
actions.root_changed.callback~
  `function`|`nil`
  Function to call when root was changed.
  Callback has 1 argument:
    - `tree`  The new root tree.
  (default: nil)

                               *filetree-config-actions.root_changed.change_cwd*
actions.root_changed.change_cwd~
  `boolean`
  Changes the current working directory when changing root tree.
  (default: false)

                                             *filetree-config-actions.open_file*
actions.open_file~
  `table`
  Options to use when opening a file.
  (default: {})

                                    *filetree-config-actions.open_file.callback*
actions.open_file.callback~
  `function`|`nil`
  Function to call when opening a file.
  Callback takes 1 argument:
    - `file`  `string` File to open.
  (default: nil)

                                   *filetree-config-actions.open_file.quit_tree*
actions.open_file.quit_tree~
  `boolean`
  Quit file tree when opening a file.
  (default: false)

                               *filetree-config-actions.open_file.window_picker*
actions.open_file.window_picker~
  `table`
  Options to use when choosing a window.
  (default: {})

                        *filetree-config-actions.open_file.window_picker.enable*
actions.open_file.window_picker.enable~
  `boolean`
  Enable window picker.
  (default: true)

                           *filetree-config-actions.open_file.window_picker.ids*
actions.open_file.window_picker.ids~
  `string`
  String of chars to use for diffrent windows.
  (default: "aoeuhtns")

                       *filetree-config-actions.open_file.window_picker.exclude*
actions.open_file.window_picker.exclude~
  `table`
  Options to use when excluding buffers.
  (default: {})

                  *filetree-config-actions.open_file.window_picker.exclude.self*
actions.open_file.window_picker.exclude.self~
  `boolean`
  Exlude file tree buffer.
  (default: true)

              *filetree-config-actions.open_file.window_picker.exclude.buftypes*
actions.open_file.window_picker.exclude.buftypes~
  `table`
  List of buffer types to exclude.
  See: |'buftype'|.
  (default: `{"nofile", "help"}`)

              *filetree-config-actions.open_file.window_picker.exclude.bufnames*
actions.open_file.window_picker.exclude.bufnames~
  `table`
  List of buffer names to exclude.
  (default: {})

             *filetree-config-actions.open_file.window_picker.suitable_callback*
actions.open_file.window_picker.suitable_callback~
  `function`|`nil`
  Function to check if a buffer should be listed when picking window.
  Add buffer to list if callback returns true.
  Callback takes 1 argument:
    - `buf`  `number` Buffer to test.
  (default: nil)

                                             *filetree-config-actions.read_file*
actions.read_file~
  `table`
  Options to use when reading a file.
  (default: {})

                                    *filetree-config-actions.read_file.callback*
actions.read_file.callback~
  `function`|`nil`
  Function to call when reading a file.
  If callback returns non-nil, then the result is used as the file content.
  Callback takes 1 argument:
    - `file`  File path to read.
  (default: nil)

                                        *filetree-config-actions.read_directory*
actions.read_directory~
  `table`
  Options to use when reading a directory.
  (default: {})

                               *filetree-config-actions.read_directory.callback*
actions.read_directory.callback~
  `function`|`nil`
  Function to call when reading a directory.
  If callback returns non-nil, then the result is used as the
  directory content. The result must be a table with tables
  with these values:
    - `name`  `string` File name.
    - `type`  `string` File type.
  Callback takes 1 argument:
    - `file`  File path to read.
  (default: nil)

                                             *filetree-config-actions.make_file*
actions.make_file~
  `table`
  Options to use when creating a file.
  (default: {})

                                    *filetree-config-actions.make_file.callback*
actions.make_file.callback~
  `function`|`nil`
  Function to call to create a file.
  Callback takes 1 argument:
    - `file`  `string` File to create.
  (default: nil)

                                        *filetree-config-actions.make_directory*
actions.make_directory~
  `table`
  Options to use when creating a directory.
  (default: {})

                               *filetree-config-actions.make_directory.callback*
actions.make_directory.callback~
  `function`|`nil`
  Function to call to create a directory.
  Callback takes 1 argument:
    - `path`  `string` Directory path to create.
  (default: nil)

                                             *filetree-config-actions.copy_file*
actions.copy_file~
  `table`
  Options to use when copying a file.
  (default: {})

                                    *filetree-config-actions.copy_file.callback*
actions.copy_file.callback~
  `function`|`nil`
  Function to call to copy a file.
  Callback takes 2 arguments:
    - `file`  `string` File to copy.
    - `dest`  `string` Destination for the new file.
  (default: nil)

                                             *filetree-config-actions.move_file*
actions.move_file~
  `table`
  Options to use when moving a file.
  (default: {})

                                    *filetree-config-actions.move_file.callback*
actions.move_file.callback~
  `function`|`nil`
  Function to call to move a file.
  Callback takes 2 arguments:
    - `file`  `string` File to move.
    - `dest`  `string` New file path.
  (default: nil)

                                           *filetree-config-actions.remove_file*
actions.remove_file~
  `table`
  Options to use when removing a file.
  (default: {})

                                  *filetree-config-actions.remove_file.callback*
actions.remove_file.callback~
  `function`|`nil`
  Function to call to remove a file.
  Callback takes 1 argument:
    - `file`  `string` File to remove.
  (default: nil)

==============================================================================
VIEW                                                             *filetree-view*

Class that handles all the rendering.

View:render_line()                             *filetree-view-render_line()*
  Render line to use in buffer.

  Parameters:~
    {node}  |filetree-node| Node to render.

View:add_highlight()                             *filetree-view-add_highlight()*
  Adds highlight to a node.

  Parameters:~
    {node}       |filetree-node| Node to highlight.
    {namespace}  `number` Highlight namespace.
    {group}      `string` Highlight group.
    {first}      `number` First column to higlight.
    {last}       `number` Last column to highlight.

View:get_cursor()                                   *filetree-view-get_cursor()*

  Returns:~
    Line position.

View:set_cursor()                                   *filetree-view-set_cursor()*
  
  Parameters:~
    {line}  number Line position.

View:get_node_count()                           *filetree-view-get_node_count()*

  Returns:~
    Number of nodes being drawn.

View:get_marked()                                   *filetree-view-get_marked()*

    Returns:~
      Table of node that are marked.

View:add_marked()                                   *filetree-view-add_marked()*
  Adds node to marked nodes.

  Parameters:~
    {node}  |filetree-node| Node to add to marked nodes.

View:remove_marked()                             *filetree-view-remove_marked()*
  Removes node from marked nodes.

  Parameters:~
    {node}  |filetree-node| Node to remove from marked nodes.

View:clear_marked()                               *filetree-view-clear_marked()*
    Removes all marked nodes.

View:is_active()                                     *filetree-view-is_active()*
  Check if window is active.

  Returns:~
    True if window is available.

==============================================================================
MAPPING                                                       *filetree-mapping*

Class that handles all the key mappings.

Mapping:cursor_down()                           *filetree-mapping-cursor_down()*
    Moves cursor down in the file tree.

Mapping:cursor_up()                               *filetree-mapping-cursor_up()*
    Moves cursor up in the file tree.

Mapping:open()                                         *filetree-mapping-open()*
    Expands node if directory, otherwise opens file in a window.

Mapping:close()                                       *filetree-mapping-close()*
    Closes node if directory or closes parent node.

Mapping:enter()                                       *filetree-mapping-enter()*
    Changes the root directory if directory, otherwise opens file in a window.

Mapping:mark()                                         *filetree-mapping-mark()*
    Adds selected node to marked nodes.

    Parameters:~
      {reverse}  `boolean` Moves cursor up if true.

Mapping:make_file()                               *filetree-mapping-make_file()*
    Asks user for a file name and then creates the file.

Mapping:make_directory()                     *filetree-mapping-make_directory()*
    Asks user for a directory name and then creates the directory.

Mapping:rename(what)                                 *filetree-mapping-rename()*
    Asks the user for a new file name and renames selected file.

    Parameters:~
      {what}  `string` What part of the file name to rename.
              Valid values are: "name", "ext", nil for full name.

Mapping:copy()                                         *filetree-mapping-copy()*
    Copy marked files to current parent node.

Mapping:move()                                         *filetree-mapping-move()*
    Move marked files to current parent node.

Mapping:remove()                                     *filetree-mapping-rename()*
    Removes selected/marked files.

Mapping:yank()                                         *filetree-mapping-yank()*
    Yank selected/marked files.

Mapping:paste()                                       *filetree-mapping-paste()*
    Paste yanked files.

Mapping:info()                                         *filetree-mapping-info()*
    View file info.

Mapping:preview()                                   *filetree-mapping-preview()*
    View file in a preview window info.

Mapping:toggle_hidden()                       *filetree-mapping-toggle_hidden()*
    Toggle hiddens files to render or not.

Mapping:redraw()                                     *filetree-mapping-redraw()*
    Redraw file tree.

Mapping:reload()                                     *filetree-mapping-reload()*
    Reload file tree.

Mapping:clear()                                       *filetree-mapping-clear()*
    Clear marked nodes.

==============================================================================
NODE                                                             *filetree-node*

Node is a class with variables:
  {name, path, parent, depth, type}

                                                           *filetree-node-new()*
Node:new()
  Creates a new node.
  
  Parameters:~
    {name}    `string` File name.
    {path}    `string` File path.
    {parent}  |filetree-node| Parent of this node.
    {depth}   `number` Directory level.
    {type}    `string` File type.

  Returns:~
    Node metatable.

                                                        *filetree-node-delete()*
Node:delete()
  Deletes node from parent node.

                                                   *filetree-node-is_dot_file()*
Node:is_dot_file()

  Returns:~
    True if name starts with a `.` (dot).

==============================================================================
EXTENSIONS                                                 *filetree-extensions*

Call `_G.filetree:enable_extension(name, conf)` to enable a extension,
where `name` is the name and `conf` is the config.

Available extensions are:

  icons~
    Fancy icons for file types.

==============================================================================
INTEGRATIONS                                             *filetree-integrations*

Call `_G.filetree:enable_integration(name, conf)` to enable a integration,
where `name` is the name and `conf` is the config.

Available integrations are:

  statline~
    Shows info about the tree in the `statline` plugin.
    https://gitlab.com/EdvinVikstrom/statline.nvim

 vim:tw=78:ts=8:ft=help:norl:
